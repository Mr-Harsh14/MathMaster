generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  role          UserRole  @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  classesJoined Class[]   @relation("StudentClasses")
  classesTaught Class[]   @relation("TeacherClasses")
  quizAttempts  Score[]
}

model Class {
  id          String    @id @default(cuid())
  name        String
  code        String    @unique
  teacherId   String
  teacher     User      @relation("TeacherClasses", fields: [teacherId], references: [id])
  students    User[]    @relation("StudentClasses")
  quizzes     Quiz[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Quiz {
  id          String    @id @default(cuid())
  title       String
  classId     String
  class       Class     @relation(fields: [classId], references: [id])
  questions   Question[]
  scores      Score[]
  timeLimit   Int?      // Time limit in minutes, null means no limit
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Question {
  id          String    @id @default(cuid())
  quizId      String
  quiz        Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  question    String
  options     String[]
  answer      String
  explanation String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Score {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  quizId      String
  quiz        Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  score       Int
  maxScore    Int
  createdAt   DateTime  @default(now())
}

enum UserRole {
  STUDENT
  TEACHER
} 